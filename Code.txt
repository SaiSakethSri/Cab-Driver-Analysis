

## K Means Clustering 

## Case Study

## One of Online Cab service providing company has collected trip related data for all
## the drivers working for it, they want to utilize this data to come up with some 
## grouping of the drivers based on the distance and speeding features so that some sort 
## of automation can be done to assign the incoming cab requests to the most appropriate 
## group of drivers

## The main objective is to come up with the clustering solution using given data which can
## effectively divide the drivers into different groups.

## data : Cab Driver data

## Dependent variable - no DV, need to find Drivers Clusters
## Independent variables - Distance travelled, Speed


import os


os.chdir("D:\Data Science Training\Data")

import pandas as pd

import numpy as np

data = pd.read_csv("Driver_data.csv")


data.info()

data.describe()


## Anayzing the distribution of data points by Speed and Distance


import matplotlib.pyplot as plt


fig,axes = plt.subplots(figsize=(12,12))
axes.scatter(data.Distance_Feature,data.Speeding_Feature,alpha=0.9,s=100)




## Feature Scaling


from sklearn import preprocessing


data.drop(['Driver_ID'],axis=1,inplace=True)


data_scaled = preprocessing.scale(data)



fig,axes = plt.subplots(figsize=(12,12))
axes.scatter(data_scaled[:,0],data_scaled[:,1],alpha=0.9,s=100)



## Data Split - not applicable in case of unsupervised learning



## Build K Means Clustering Model

## Step 1 - Finding the value of K using Elbow point graph

## Step 2 - Get the Clustersing solution for given value of K



## Step 1 -

## Calculate "Within cluster sum of squares" for all K values


from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=2, max_iter=1000).fit(data_scaled)



kmeans.inertia_



Within_cluster_sos = {}


for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(data_scaled)
    Within_cluster_sos[k] = kmeans.inertia_



Within_cluster_sos.values()


## Drawing Elbow curve - look for the elbow junction point

## Optimum K value = Elbow junction point
    

fig,axes = plt.subplots(figsize=(10,10))

axes.plot(range(1, 11),Within_cluster_sos.values(),'go-')



## Building Final K Means Model


kmeans = KMeans(n_clusters=4, max_iter=1000,init='k-means++').fit(data_scaled)


kmeans.labels_


data['cluster'] = kmeans.labels_



## Analyzing the clusters created by model

import matplotlib.cm as cm
colors = cm.rainbow(data.cluster*100)

fig,axes = plt.subplots(figsize=(12,12))
axes.scatter(data.Distance_Feature,data.Speeding_Feature,c=colors,alpha=0.9,s=100)











